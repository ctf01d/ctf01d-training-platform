/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiV1TeamsTeamIdUsersUserIdPut200Response from '../model/ApiV1TeamsTeamIdUsersUserIdPut200Response';
import TeamRequest from '../model/TeamRequest';
import TeamResponse from '../model/TeamResponse';

/**
* Teams service.
* @module api/TeamsApi
* @version 1.0.0
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1TeamsTeamIdUsersUserIdDelete operation.
     * @callback module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave user from team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @param {module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response}
     */
    apiV1TeamsTeamIdUsersUserIdDelete(teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling apiV1TeamsTeamIdUsersUserIdDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiV1TeamsTeamIdUsersUserIdDelete");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TeamsTeamIdUsersUserIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TeamsTeamIdUsersUserIdPost operation.
     * @callback module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect user with team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @param {module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response}
     */
    apiV1TeamsTeamIdUsersUserIdPost(teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling apiV1TeamsTeamIdUsersUserIdPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiV1TeamsTeamIdUsersUserIdPost");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TeamsTeamIdUsersUserIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/users/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TeamsTeamIdUsersUserIdPut operation.
     * @callback module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve connected user with team lead
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @param {module:api/TeamsApi~apiV1TeamsTeamIdUsersUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1TeamsTeamIdUsersUserIdPut200Response}
     */
    apiV1TeamsTeamIdUsersUserIdPut(teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling apiV1TeamsTeamIdUsersUserIdPut");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling apiV1TeamsTeamIdUsersUserIdPut");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV1TeamsTeamIdUsersUserIdPut200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTeam operation.
     * @callback module:api/TeamsApi~createTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new team
     * @param {module:model/TeamRequest} teamRequest 
     * @param {module:api/TeamsApi~createTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createTeam(teamRequest, callback) {
      let postBody = teamRequest;
      // verify the required parameter 'teamRequest' is set
      if (teamRequest === undefined || teamRequest === null) {
        throw new Error("Missing the required parameter 'teamRequest' when calling createTeam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTeam operation.
     * @callback module:api/TeamsApi~deleteTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team
     * @param {String} teamId 
     * @param {module:api/TeamsApi~deleteTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTeam(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling deleteTeam");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamById operation.
     * @callback module:api/TeamsApi~getTeamByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team by ID
     * @param {String} teamId 
     * @param {module:api/TeamsApi~getTeamByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamResponse}
     */
    getTeamById(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling getTeamById");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamResponse;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTeams operation.
     * @callback module:api/TeamsApi~listTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all teams
     * @param {module:api/TeamsApi~listTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamResponse>}
     */
    listTeams(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamResponse];
      return this.apiClient.callApi(
        '/api/v1/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeam operation.
     * @callback module:api/TeamsApi~updateTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * @param {String} teamId 
     * @param {module:model/TeamRequest} teamRequest 
     * @param {module:api/TeamsApi~updateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTeam(teamId, teamRequest, callback) {
      let postBody = teamRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling updateTeam");
      }
      // verify the required parameter 'teamRequest' is set
      if (teamRequest === undefined || teamRequest === null) {
        throw new Error("Missing the required parameter 'teamRequest' when calling updateTeam");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
